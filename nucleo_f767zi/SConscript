Import("env")

if env.get("YPP_AUTO_COMPILER", True):
    env.Replace(PREFIX="arm-none-eabi-", CC="${PREFIX}gcc", CXX="${PREFIX}g++",
                AS="${PREFIX}as", AR="${PREFIX}gcc-ar", RANLIB="${PREFIX}gcc-ranlib", SIZE="${PREFIX}size")

flags = ["-mcpu=cortex-m7", "-mthumb", "-mfloat-abi=hard", "-mfpu=fpv5-sp-d16"]
env.Append(CCFLAGS=flags + ["-DSTM32F767xx", "-ffunction-sections", "-fdata-sections", "-g"],
           LINKFLAGS=flags + ["-Wl,--gc-sections", "--specs=nano.specs", "--specs=nosys.specs"])

ldscript = env.File("system/stm32f767zi.ld")


def _ypp_main_program_impl(env, *args, **kwargs):
    program = env.MainProgram(
        *args, LINKFLAGS=["$LINKFLAGS", "-T", ldscript], **kwargs)
    env.Depends(program, ldscript)

    show_size = env.Alias("show_size", program, "$SIZE $SOURCE")
    env.Default(show_size)
    env.AlwaysBuild(show_size)
    return program


env.AddMethod(_ypp_main_program_impl, "YPPMainProgram")

env.Append(CPPPATH=[env.Dir("$PKGROOT/include/"),
                    env.Dir("$PKGROOT/include/vendor")])

vendor = env.SConscript(dirs="vendor")

system = env.SConscript(dirs="system")
drivers = env.SConscript(dirs="drivers")

libs = system + drivers + vendor
Return("libs")
